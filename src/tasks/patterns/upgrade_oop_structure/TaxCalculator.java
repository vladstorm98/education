package tasks.patterns.upgrade_oop_structure;

// ‚ùå –ü—Ä–æ–±–ª–µ–º—ã:
// –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ ("USA", "Germany" –∏ —Ç. –¥.).
// –°–ª–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞, –ø—Ä–∏–¥—ë—Ç—Å—è –º–µ–Ω—è—Ç—å –∫–æ–¥).
// –ù–µ—Ç OOP (–ø–æ —Å—É—Ç–∏, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–∞—è if-else –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è).
// üîπ –ó–∞–¥–∞—á–∞:
// –£–±–µ—Ä–∏ if-else, –∏—Å–ø–æ–ª—å–∑—É—è Enum + Strategy.
// –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ –º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.

public class TaxCalculator {
    public static double calculateTax(String country, double income) {
        if (country.equals("USA")) {
            return income * 0.3;
        } else if (country.equals("Germany")) {
            return income * 0.25;
        } else if (country.equals("UK")) {
            return income * 0.2;
        } else {
            throw new IllegalArgumentException("Unsupported country: " + country);
        }
    }
}